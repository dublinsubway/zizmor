#!/usr/bin/env -S uv run --script
# /// script
# requires-python = ">=3.13"
# dependencies = [
#     "prance[osv]",
# ]
# ///

import sys
from collections import defaultdict
from email.policy import default
from pathlib import Path

from prance import ResolvingParser

_HERE = Path(__file__).parent
_WEBHOOKS_JSON = _HERE / "api.github.com.json"

assert _WEBHOOKS_JSON.is_file(), f"Missing {_WEBHOOKS_JSON}"

# A mapping of GitHub workflow events to their webhook event payload names.

_WORKFLOW_EVENTS: dict[str, str | None] = {
    "branch_protection_rule": "branch_protection_rule",
    "check_run": "check_run",
    "check_suite": "check_suite",
    "create": "create",
    "delete": "delete",
    "deployment": "deployment",
    "deployment_status": "deployment_status",
    "discussion": "discussion",
    "discussion_comment": "discussion_comment",
    "fork": "fork",
    "gollum": "gollum",
    "issue_comment": "issue_comment",
    "issues": "issues",
    "label": "label",
    "merge_group": "merge_group",
    "milestone": "milestone",
    "page_build": "page_build",
    "public": "public",
    "pull_request": "pull_request",
    # TODO: Documented but unclear if this is still supported?
    # "pull_request_comment": "pull_request_comment",
    "pull_request_review": "pull_request_review",
    "pull_request_review_comment": "pull_request_review_comment",
    "pull_request_target": "pull_request",
    "push": "push",
    "registry_package": "registry_package",
    "release": "release",
    "repository_dispatch": "repository_dispatch",
    # Not a webhook.
    # `github.event.schedule` is the only thing that comes from this.
    "schedule": None,
    "status": "status",
    "watch": "watch",
    # Inherits its webhook from the calling workflow.
    "workflow_call": None,
    "workflow_dispatch": "workflow_dispatch",
    "workflow_run": "workflow_run",
}


def log(msg: str) -> None:
    print(f"[+] {msg}", file=sys.stderr)


if __name__ == "__main__":
    log("resolving OpenAPI spec, this will take a moment...")
    # TODO: Optimize; this is ridiculously slow.
    parser = ResolvingParser(str(_WEBHOOKS_JSON))
    spec = parser.specification
    log("\t...done")

    # We only care about webhook payload schemas.
    schemas = {
        name: schema
        for (name, schema) in spec["components"]["schemas"].items()
        if name.startswith("webhook-")
    }
    log(f"isolated {len(schemas)} webhook payload schemas")

    schemas_for_event: dict[str, list[dict]] = defaultdict(list)
    visited_schemas = set()
    # We process payload names uniquely and in order of length,
    # to avoid reprocessing e.g. `webhook-pull-request-review-comment-*`
    # as both `pull-request` and `pull-request-review-comment`.
    payload_names = {
        name.replace("_", "-") for name in _WORKFLOW_EVENTS.values() if name
    }
    for payload_name in sorted(payload_names, key=lambda n: len(n), reverse=True):
        if payload_name in visited_schemas:
            continue

        for schema_name, schema in schemas.items():
            if not schema_name.startswith(f"webhook-{payload_name}-"):
                continue
            if schema_name in visited_schemas:
                continue

            visited_schemas.add(schema_name)
            schemas_for_event[payload_name].append(schema)

    for event, schemas in schemas_for_event.items():
        log(f"\t{event} -> {len(schemas)} schemas")
